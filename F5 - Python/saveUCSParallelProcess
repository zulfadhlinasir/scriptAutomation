import os
import getpass
from netmiko import Netmiko
from multiprocessing.dummy import Pool as ThreadPool
from paramiko import SSHClient, AutoAddPolicy
from scp import SCPClient


#####################################################################################################
def selectDirAndInventory():
  print("THIS IS TO EXTRACT UCS")
  localDirOri=input("which directory you want to store the UCS: ")
  if os.path.isdir(localDirOri) == False:
    os.mkdir(localDirOri)
  else:
    print("Its an existing directory,proceed?")
  localDir=localDirOri+"/"

  inventoryFile=input("which inventory file need to be read: ")
  return localDir,inventoryFile

#EXTRACT CREDENTIAL
def extractCredentialFunct():
  username="xxxxx"
  password=getpass.getpass(prompt='Password:',stream=None)
  return username,password

#EXTRACT HOST IP
def extractHostIP(inventoryFile):
  openInventory=open(inventoryFile,'r')
  hostIPList=openInventory.readlines()
  return hostIPList


#LOGIN
def createUCSFunct(nodeIP):
  try:
   s = {
        'device_type':"f5_ltm", 'ip':nodeIP, 'username':username,
        'password':password, 'port':"22",'verbose':False
        }
   switch = Netmiko(**s)
   print("########",nodeIP.strip() + " " + "is reachable")
   #SWITCH TO BASH SHELL IN F5
   switchToBash=switch.send_command_timing("bash",read_timeout=0)
   #EXTRACT HOSTNAME
   extractHostname=switch.send_command_timing("tmsh list sys global-settings hostname  | grep hostname | awk -F\" \" '{print$ 2}'",read_timeout=0)
   hostName=extractHostname.split(".")[0]
   saveUCS=switch.send_command_timing("tmsh save sys ucs "+hostName,read_timeout=0,last_read=10)
   ucsNameAndDir=saveUCS.splitlines()[1].split()[0]
   ucsName=ucsNameAndDir.split('/')[4]
   switch.disconnect()
   
   ssh = SSHClient()
   ssh.set_missing_host_key_policy(AutoAddPolicy)
   #DOWNLOAD UCS
   try:
     #DEFINE DIR and UCSNAME
     localFile=localDir+ucsName
     #DISPLAY ATTEMPT TO DOWNLOAD UCS FROM WHICH F5
     print("Attempting to download ",ucsName, "from ",nodeIP.strip()," ",hostName)
     ssh.connect(nodeIP.strip(),username=username,password=password)
     with SCPClient(ssh.get_transport()) as scp:
       scp.get(ucsNameAndDir,localFile)
   except Exception as e: 
     print(e)
     print("########Failed to download UCS from: ",nodeIP.strip()," ",hostName)
  except Exception as e:
    print (e)
    print("########Failed to create UCS, from: ",nodeIP.strip()," ",hostName)
#####################################################################################################

#INVENTORY INPUT and SET DIR
localDir,inventoryFile=selectDirAndInventory()
#EXTRACT CREDENTIAL
username,password=extractCredentialFunct()
myPool = ThreadPool(100)
#THIS FUNCTION WILL INITIATE LOGIN, RUN COMMAND, AND WRITE THE OUTPUT TO FILE
myPool.map(createUCSFunct,extractHostIP(inventoryFile))
